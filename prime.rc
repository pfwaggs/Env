# alias definitions
alias ..='cd ..'
alias ...='cd ../..'
alias c='clear'
alias ?='dirs -l -v'
alias edit='$EDITOR'
alias e='emacsclient -nw '
alias h='history'
alias l='ls -F'
alias ll='l -l'
alias lr='ll -R'
alias now='date +%F; date -u; date +"%a %h %d %T"; date +%s'
alias p='$PAGER'
alias ic='tr [:lower:][:upper:] [:upper:][:lower:] <<< '
alias brewon='source ~/perl5/perlbrew/etc/bashrc'
alias dateme='ntpdate 0.pool.ntp.org'
alias pacman='sudo /usr/bin/pacman'
alias pmnew='sudo /usr/bin/pacman -Sy; sudo /usr/bin/pacman -Qu'
alias pmup='sudo /usr/bin/pacman -Su'
alias grubgen='sudo /usr/bin/grub-mkconfig -o /boot/grub/grub.cfg'
alias su='sudo /bin/su -'
alias Cat='clear; cat '
alias gitbr='b=play-$(date +%Y.%j); git branch $b; git checkout $b'
alias sshFingerPrint='ssh-keygen -E md5 -lf ~/.ssh/id_rsa'
alias xme='ssh-agent startxfce4'
alias addkeys='ssh-add ~/.ssh/{github,id}_rsa'
alias vimh='vim +:help +:only'
alias -- -d='&>/dev/null popd '
alias -- +d='&>/dev/null pushd '
function L () (
#help:L:provides ls support for hidden (dot) files
#help:usage:L [options] [dir]
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    declare -a args
    opts=lAd
    for x in $*; do
        case $x in
            -?)
                opts+=${x/-}
                ;;
            *)
                args+=("$x")
                ;;
        esac
    done
    [[ ${#args[@]} -gt 0 ]] || args+=(.)
    for x in "${args[@]}"; do
        ls -$opts "$x"/.??* 2> /dev/null
    done
)
function _ArgParser () (
#help:_ArgParser:assists in parsing command line args
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    declare -a list;
    [[ -n COMP_LINE ]] && x=$2 || x=$1;
    partial=${x/\~/$HOME};
    file=${partial##*/};
    for dir in "${partial%/*}" "${DIRSTACK[@]}" ${CDPATH//:/ };
    do
        [[ ${#list[@]} -eq 0 ]] || break;
        while read -r path; do
            [[ -d $path ]] && list+=("$path");
        done < <(compgen -G "${dir:-.}/$file*" | sort);
    done;
    [[ ${#list[@]} -gt 0 ]] && printf "%s\n" "${list[@]}" | ulist
)
function _ConvertColor () (
#help:_ConvertColor:converts color name/number/rgb to terminal string
#help:usage:_ConvertColor value
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }

    if [[ $1 =~ ^0x[[:xdigit:]]{6}$ ]]; then
	read r g b < <(echo -n ${1/#0x} | sed 's/../& /g')
	echo -n "38;2;$((0x$r));$((0x$g));$((0x$b))"
    elif [[ $1 =~ ^0x[[:xdigit:]]{2}$ ]]; then
	echo -n "38;5;$(($1))"
    else
	_ConvertColor ${_ColorMap[${1:-white}]}
    fi
)
function _FixList () (
#help:_FixList :some basic list operations:
#help: :-s sort
#help: :-e exists
#help: :-r reverse
#help: :-l resolve links
#help: :-c clear items
#help: :-u unique items
#help: :-S output a single string
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    declare -a nlist list opts
    for p in "$@"; do
        [[ $p =~ ^-.* ]] && opts+=($p) || list+=("$p")
    done
    if [[ ${#list[@]} -eq 0 ]]; then
        while read p; do
            list+=("$p")
        done < <(cat -- -)
    fi
    for opt in ${opts[@]}; do
        nlist=()
        case $opt in
            -s)
                while read -r p; do
                    nlist+=("$p")
                done < <(printf '%s\n' "${list[@]}" | sort)
                ;;
            -e)
                for p in "${list[@]}"; do
                    [[ -e "$p" ]] && nlist+=("$p") || continue
                done
                ;;
            -r)
                while read -r p; do
                    nlist+=("$p")
                done < <(printf '%s\n' "${list[@]}" | tac)
                ;;
            -l)
                for p in "${list[@]}"; do
                    [[ -L "$p" ]] && p=$(readlink -e "$p") || :
                    nlist+=("$p")
                done
                ;;
            -c)
                for p in "${list[@]:1}"; do
                    [[ $p =~ ${list[0]}.* ]] || nlist+=("$p")
                done
                ;;
            -u)
                for p in "${list[@]}"; do
                    [[ ${nlist[@]} =~ :$p ]] || nlist+=(":$p")
                done
                nlist=("${nlist[@]/#:}")
                ;;
            -S|*)
                declare IFS=${SEP:-:}$IFS
                echo "${list[*]}"
                return
                ;;
        esac
        list=("${nlist[@]}")
    done
    printf '%s\n' "${list[@]}"
)
function _ShowPrompt () {
    _PromptShow[host]=on
    _PromptShow[prompt]=on
    PS1=
    declare x color text
    for x in num extra tag user host spath lpath prompt; do
        [[ ${_PromptShow[$x]} = on ]] || continue
	text=${_PromptText[$x]:-${_InitialText[$x]}}
        [[ -n $text ]] || continue
	color=$(_ConvertColor ${_PromptColors[$x]})
        PS1+=$'\[\e['${color}m$'\]'$text' '
    done
    PS1+=$'\[\e[m\]'
}
function _LibHelp () (
    loaded=$(compgen -A function | grep -v _ | xargs)
    src=$1
    [[ -f $ENVDIR/$src ]] && src=$ENVDIR/$src
    all=$(sed -r '/^function [[:alnum:]]+ /!d'  $src | awk '{print $2}' | xargs)
    sed -r "/:(${all// /|}):/!d" $src |
	sed -r "/:(${loaded// /|}):/s/^#help/  x  /" | column -s: -t |
	sed -r 's/^#help/     /'
)
function _Help () (
    FNC=$1 SRC=${2:-$($1 -i | awk '{print $2}' | tr -d '()')}
    echo src should be $($1 -r)
    [[ -f $ENVDIR/$SRC ]] && SRC=$ENVDIR/$SRC
    sed -r "/^#help:$FNC:/"'{:1;n;/#help/b1};d' $SRC | column -s: -t | sed -r 's/^#help//'
)
function _Show () (
#help:_Show:complete function for the show function
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    [[ -n $COMP_LINE ]] && x=$2 || x=$1
    compgen -v | grep -i "^$x"
)
complete -o filenames -C '_ArgParser' cd stkdiff
complete -C '_Show' show
function configEd () {
#help:configEd:configure the editor of your choice (emacs, vim)
#help:usage:configEd [emacs|vim]
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    case $1 in
        emacs)
            ps -f -C emacs | grep -q daemon || emacs --daemon
            export EDITOR=$(type -p emacsclient | head -n 1)
            export VISUAL=$EDITOR
            set -o emacs
            ;;
        vim)
            export EDITOR=$(type -p vim vi | head -n 1)
            export VISUAL=$EDITOR
            set -o vi
            ;;
    esac
}
function hmo () (
#help:hmo:help for functions
#help:usage:hmo [-hqa]
#help:usage:hmo [function|lib] ...
#help: :-h display help
#help: :-q show function libs
#help: :-a display all func/libs
    declare -a libs=($ENVDIR/*.rc) funcs=$(compgen -A function | grep -v '_' | xargs)
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    opts=$(echo $@ | tr ' ' '\n' | sed '/^-/!d' | xargs)
    arg=$(echo $@ prime.rc | tr ' ' '\n' | sed '/^-/d'  | sed 1q)
    libs=($(ls $ENVDIR/*.rc))
    [[ $opts = -q ]] && { printf "%s\n" ${libs[@]##*/}; return; }
    [[ $opts = -a ]] && { _LibHelp ${libs[@]##*/}; return; }
    [[ $arg =~ \.rc$ ]] && _LibHelp $arg || _Help $arg
)
function load () {
#help:load:loads .rc files and individual functions from .rc files
#help:usage:load lib.rc|func (...) 
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    declare src dest x libs extras deflibs=$(echo $ENVDIR/{prime,extra,tools}.rc)
    declare libs=$(echo $@ | xargs -n 1 | sed -r '/\.rc$/!d' | xargs)
    declare funcs=$(echo $@ | xargs -n 1 | sed -r '/\.rc$/d' | xargs)
    [[ -n $funcs ]] || [[ -n $libs ]] || libs=${deflibs%% *}
    declare -A libmap
    for lib in ${libs:=$deflibs}; do
	[[ $lib =~ ^\. ]] && lib=$PWD/${lib:2}
	[[ $lib =~ ^/ ]] || lib=$ENVDIR/${lib##*/}
	libmap[$lib]=${lib//\//:}
    done
    &>/dev/null pushd /tmp
    if [[ -n $funcs ]]; then
	while read lib func; do
	    echo $lib $func >&2
	    sed -r "/^function $func \(\)/{:1;n;/^[})]/!b1;p};d" $lib >> ${libmap[$lib]}
	done < <(printf "^function %s\n" $funcs | egrep -H -o -f - $libs | sed -r "s/:function//")
    else
	for lib in ${!libmap[@]}; do
	    cp $lib ${libmap[$lib]}
	done
    fi
    for lib in ${libmap[@]}; do
	[[ -f $lib ]] || continue
	source $lib
    done
    rm -f ${libmap[@]} && &>/dev/null popd
}
function lsu () (
#help:lsu:a long listing of dirs moving up the dir path
#help:usage:lsu
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    declare -a np=(/ "${1:-$PWD}")
    while [[ -n ${np[-1]%/*} ]]; do
        np+=(${np[-1]%/*})
    done
    ls -ld "${np[@]}"
)
function mkwdir () (
#help:mkwdir:creates a new arg.nn dir based on arg
#help:usage:mkwdir (base)
#help: :default arg is the date
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    pat=${1:-$(date +%F | tr '-' '_')}
    count=$(ls -d $pat.?? 2>/dev/null | wc -l)
    printf -v dir "%s.%02d" $pat $((1+count))
    mkdir -v $dir
)
function pop () {
#help:pop :simple wrapper for popd; pops given entry (default is current)
#help:usage:pop [n]
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    popd ${1:++$1} > /dev/null
    dirs -l -v
}
function prep () (
#help:prep:used to give a boilerplate file for editing
#help:usage:prep file.(sh||fn|pl|pm|py)
#help: :based on extension;
#help: :sh for shell scripts
#help: :pl for perl scripts
#help: :py for python scripts
#help: :fn for bash functions
#help: :pm for perl module
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    PREPDIR=$ENVDIR/support/prep_files
    source ${PREPDIR}/map
    for file in $@; do
        read base type < <(echo ${file/./ })
        [[ $type =~ fn ]] && dest=$base || dest=$file
        [[ -s $dest ]] && echo $dest exists: skipping && continue
        sed -e "s/zZz/$base/" $PREPDIR/${map[$type]} > $dest
        [[ -s $dest ]] || { echo sed failed; continue; }
        [[ $type =~ (sh|pl|py) ]] && chmod 755 $dest
        echo prepped $dest as ${map[$type]/_/ }
    done
)
function push () {
#help:push:simple wrapper for pushd
#help:usage:push (path)
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]/?tmp?}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    if [[ -n $1 ]]; then
        if [[ -d $1 ]]; then
            pushd -n $1 &>/dev/null
        else
            read -p 'new dir: ' -e -i "$1"
            [[ -n $REPLY ]] || return 0
            mkdir -p "$REPLY"
            pushd -n "$REPLY" &>/dev/null
        fi
    fi
    pushd &>/dev/null
    dirs -l -v
}
function show () (
#help:show:used to show variable values
#help:usage:show var
#help: :type values in lowercase and <tab> will uppercase if needed
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    read pre x str < <(declare -p $1 | cut -f1 -d=)
    if [[ $x =~ [aA] ]]; then
	echo "$pre $x $str"
        echo array $1:
        for x in $(eval "echo \${!$1[@]}"); do
            eval "echo =$x=\${$1[$x]}"
        done | column -t -s=
    else
	declare -p $1
    fi
)
function spx () (
#help:spx:simple function to do aspell
#help:usage:spx word [word ...]
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    echo $@ | aspell -a
)
function stp () {
#help:stp:utility to set prompt line characteristics
#help:usage:stp -k key -c color -t text -s 0|1
#help: :stp -C
#help: :args are key[=0|1][=color][=text]
#help: :keys are
#help: :num:history number at beginning
#help: :extra:extra field
#help: :tag:tag field
#help: :user:the users sid
#help: :host:hostname
#help: :spath:short path
#help: :lpath:full path
#help: :prompt:prompt symbol (# for root, $ for loader)
#help: :-C resets the scheme
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    declare x key show color txt keys=${!_InitialText[@]}
    declare keypat=${keys// /|}
    declare colors=${!_ColorMap[*]}
    colors=${colors// /|}"|0x[[:xdigit:]]+"
    [[ $# -eq 0 ]] && { _ShowPrompt; return; }
    for x in "$@"; do
	if [[ $x = reset ]]; then
	    shift
	    for x in ${@:-$keys}; do
		_PromptColors[$x]=${_InitialColors[$x]}
		_PromptShow[$x]=${_InitialShow[$x]}
		_PromptText[$x]=${_InitialText[$x]}
	    done
	    _ShowPrompt
	    return
	elif [[ $x = info ]]; then
	    shift
	    [[ $x = initial ]] && x=Initial || x=Prompt
	    paste <(show _${x}Colors | sed 1d | sort) <(show _${x}Text | sed 1d | sort) <(show _${x}Show | sed 1d | sort) |
		tr -d = | awk '{print $1, $2, $4, $6}' | sed "1i keys _${x}Colors _${x}Text _${x}Show" | column -t
	    return
	elif [[ $x =~ ${keypat} ]]; then
	    key=$x
	elif [[ $x =~ (on|off) ]]; then
	    show=$x
	elif [[ $x =~ ^$colors$ ]]; then
	    color=$x
	elif [[ $x =~ ^[[:alnum:]]+$ ]]; then
	    txt=$x
	else
	    echo ">$x<" no match found >&2
	    return
	fi
    done
    [[ -n $key ]] || { echo invalid key; return; }
    [[ -n $color ]] && _PromptColors[$key]=$color
    [[ -n $show ]] && _PromptShow[$key]=$show
    [[ -n $txt ]] && _PromptText[$key]=$txt
    _ShowPrompt
}
function ulist () (
#help:ulist:finds, in order, the unique items in a list.
#help:usage:.. | ulist
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    declare -a list
    while read; do
        [[ ${list[@]} =~ :$REPLY ]] || list+=(":$REPLY")
    done < <(cat -)
    printf "%s\n" "${list[@]/:}"
)
function unload () (
#help:unload:unloads a function or an entire library
#help:usage:unload [function|library]
    [[ ${@:(-1)} = -h ]] && { _Help ${FUNCNAME[0]} ${BASH_SOURCE[0]}; return; }
    [[ ${@:(-1)} = -i ]] && { echo "${BASH_SOURCE[0]//:/\/}:${FUNCNAME[0]}"; return; }
    all=$(compgen -A function)
    declare -a list dump
    for x in $@; do
        if [[ $x =~ .rc$ ]]; then
            list+=($(awk '/^function / {print $2}' $ENVDIR/$x))
        else
            list+=($x)
        fi
    done
    for x in ${list[@]}; do
        [[ "$all" =~ $x ]] && dump+=($x)
    done
    [[ ${#dump[@]} -gt 0 ]] && { printf "%s\n" ${dump[@]}; unset -f ${dump[@]}; }
)
